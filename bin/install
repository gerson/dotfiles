#!/bin/bash

set -e

dir=$PWD

if [[ ! "$dir/bin/install" -ef "$0" ]]; then
  echo "Please run 'bin/install' from dotfiles root folder"
  exit 1
fi

# Sysmlink dotfiles to HOME directory and renaming existing file with .old suffix
skip_or_symlink_file(){
  local file=$1
  local link_path=$2
  local dotfile_path="${dir}/${file}"
  # If file exists and it's a symlink
  if [ -L "${link_path}" ]; then
    echo "Skipped. It already exists"
  else
    # If file exists
    if [ -f "${link_path}" ]; then
      mv "${link_path}" "${link_path}.old"
      printf "(Renaming ${file} to ${file}.old)\t"
    fi
    ln -nfs "${dotfile_path}" "${link_path}"
    echo "Symlinked to ${link_path}"
  fi
}

# Getting dotfiles list into an array
files=( $(find . -maxdepth 1 -name '.*' -type f | sed 's#^\./##') )

for file in ${files[@]}; do
  printf "${file}\t"
  skip_or_symlink_file $file "${HOME}/${file}"
done

# -------------------------------------
echo "=> Set Sublime Configuration"
# -------------------------------------

sublime_versions=(2)
preferences_file="Preferences.sublime-settings"
for sublime_version in ${sublime_versions[@]}; do
  sublime_home="${HOME}/Library/Application Support/Sublime Text ${sublime_version}"
  sublime_default_dir="${sublime_home}/Packages/Default"
  # Symlink Sublime preferences
  if [ -d "${sublime_home}" ]; then
    printf "${preferences_file}\t"
    skip_or_symlink_file $preferences_file "${sublime_default_dir}/${preferences_file}"
  fi
  # Symlink Package Control
  package_control_dir="${sublime_home}/Packages/Package Control"
  printf "Sublime Package Control....."
  if [ -d "${package_control_dir}" ]; then
    echo "Already installed"
  else
    mkdir "${package_control_dir}"
    curl -sS https://packagecontrol.io/Package%20Control.sublime-package | tar -xf - -C "${package_control_dir}"
    echo "Installed"
  fi
done
